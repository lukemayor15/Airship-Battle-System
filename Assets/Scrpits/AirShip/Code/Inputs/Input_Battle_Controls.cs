//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scrpits/AirShip/Code/Inputs/Input_Battle_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Battle_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Battle_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Battle_Controls"",
    ""maps"": [
        {
            ""name"": ""Battle_Controls"",
            ""id"": ""166d935c-0d23-4dec-be53-8a43cb8c0785"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""a0e78c6e-94de-49bc-8a07-f8aff5169af4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b06f016c-0014-483e-aad6-add6f35c4248"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Battle_Controls
        m_Battle_Controls = asset.FindActionMap("Battle_Controls", throwIfNotFound: true);
        m_Battle_Controls_Move = m_Battle_Controls.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Battle_Controls
    private readonly InputActionMap m_Battle_Controls;
    private IBattle_ControlsActions m_Battle_ControlsActionsCallbackInterface;
    private readonly InputAction m_Battle_Controls_Move;
    public struct Battle_ControlsActions
    {
        private @Input_Battle_Controls m_Wrapper;
        public Battle_ControlsActions(@Input_Battle_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Battle_Controls_Move;
        public InputActionMap Get() { return m_Wrapper.m_Battle_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Battle_ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IBattle_ControlsActions instance)
        {
            if (m_Wrapper.m_Battle_ControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Battle_ControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Battle_ControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Battle_ControlsActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Battle_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Battle_ControlsActions @Battle_Controls => new Battle_ControlsActions(this);
    public interface IBattle_ControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
